ext read_u8() -> u8;
ext read_usize() -> usize;
ext read_isize() -> isize;
ext read_fsize() -> fsize;

ext print_u8(u8) -> ();
ext print_usize(usize) -> ();
ext print_isize(isize) -> ();
ext print_fsize(fsize) -> ();

ext newline() -> ();

ext alloc(usize) -> *u8;
ext dealloc(*u8, usize) -> ();

type A = (B, B);
type B = fsize;
type C = A;

fun main() -> () {
    test_duplicate();
}

fun test_duplicate() -> () {
    let a: usize = 4_usize;
    test_duplicate_inner(a);
    print_usize(a);
    test_non_duplicate_inner(a);
    print_usize(a);
}

fun test_duplicate_inner(a: usize) -> () {
    a := 8_usize;
}

fun test_non_duplicate_inner(a: &usize) -> () {
    a := 16_usize;
}

fun read_arbitrary_size_string() -> () {
    let s: (*u8, usize, usize) = new_string();

    let good: usize = 0_usize;
    while good == 0_usize {
        let c: u8 = read_u8();
        if c == 10_u8 {
            good := 1_usize;
        }
        s := push(s, c);
    }

    print_string(s);
}

fun new_string() -> (*u8, usize, usize) {
    (alloc(10_usize), 0_usize, 10_usize)
}

fun push(s: (*u8, usize, usize), c: u8) -> (*u8, usize, usize) {
    if s.1 == s.2 {
        let new_size: usize = 2_usize * s.2;
        let new_alloc: *u8 = alloc(new_size);
        let i: usize = 0_usize;
        while i < s.2 {
            new_alloc[i] := s.0[i];
            i := i + 1_usize;
        }
        s := (new_alloc, s.1, new_size);
    }

    s.0[s.1] := c;
    s.1 := s.1 + 1_usize;
    s
}

fun print_string(s: (*u8, usize, usize)) -> () {
    let i: usize = 0_usize;
    while (i < s.1) {
        print_u8(s.0[i]);
        i := i + 1_usize;
    }
}

fun test_echo_ten() -> () {
    let a: *u8 = alloc(10_usize);

    let i: usize = 0_usize;
    while (i < 10_usize) {
        a[i] := read_u8();
        i := i + 1_usize;
    }

    i := 0_usize;
    while (i < 10_usize) {
        print_u8(a[i]);
        i := i + 1_usize;
    }

    newline();
}

fun test_pass_pointer () -> () {
    let a: *u8 = alloc_and_read();
    print_u8(a!)
}

fun alloc_and_read() -> *u8 {
    let a: *u8 = alloc(1_usize);
    a! := read_u8();
    a
}

fun test_tuple_io() -> () {
    let a: usize = read_usize();
    let b: isize = read_isize();
    let c: fsize = read_fsize();
    let d: ((usize, isize), fsize) = test_pass_return_two((a, b, c));
    print_usize(d.0.0);
    print_isize(d.0.1);
    print_fsize(d.1);
}

fun test_tuple(a: usize, b: isize, c: fsize) -> usize {
    let t: (usize, isize, fsize) = (a, b, c);
    t.0
}

fun test_pass_return_two(a: (usize, isize, fsize)) -> ((usize, isize), fsize) {
    ((a.0, a.1), a.2)
}

fun test_calling() -> () {
    let a: usize = read_usize();
    let b: usize = double(a);
    let c: usize = double(b);
    let d: usize = a + b + c;
    print_usize(d);
}

fun test_subtraction() -> () {
    let e: usize = read_usize();
    let e: usize = sub_one(e);
    print_usize(e);
}

fun test_if_statement() -> () {
    let f: usize = read_usize();
    if f == 1_usize {
        print_usize(23_usize);
    }
    print_usize(42_usize);
}

fun test_assignment() -> () {
    let a: usize = read_usize();
    if a == 0_usize {
        a := 14_usize;
    }
    print_usize(a);
}

fun test_type_reassign() -> () {
    let a: usize = read_usize();
    let a: isize = 0_isize;
}

fun test_while(a: usize, b: usize) -> usize {
    let result: usize = 1_usize;
    while (b > 0_usize) {
        result := result * a;
        b := b - 1_usize;
    }
    result
}

fun pow(a: fsize, b: usize) -> fsize {
    let result: fsize = 1_fsize;
    while (b > 0_usize) {
        result := result * a;
        b := b - 1_usize;
    }
    result
}

fun double(a: usize) -> usize {
    a + a + a
}

fun sub_one(a: usize) -> usize {
    a - 2_usize
}